//---------------------------------------------------------------------------
#include <System.hpp>
#pragma hdrstop
#include "Main.h"
#include "ReadThread.h"
#include "sqlite3.h"
#include <windows.h>
#include <iostream>
#include <string>
#pragma package(smart_init)
//---------------------------------------------------------------------------
//   Important: Methods and properties of objects in VCL can only be
//   used in a method called using Synchronize, for example:
//
//      Synchronize(&UpdateCaption);
//
//   where UpdateCaption could look like:
//
//      void __fastcall ReadThread::UpdateCaption()
//      {
//        Form1->Caption = "Updated in a thread";
//      }
//---------------------------------------------------------------------------
__fastcall ReadThread::ReadThread(bool CreateSuspended, AbstractFS* FS, sqlite3* Database)
	: TThread(CreateSuspended), FS(FS), Database(Database)
{
	 FreeOnTerminate = true;
	 Iterator_inst = new  Iterator(FS);
}
//---------------------------------------------------------------------------
void __fastcall ReadThread::Execute()
{
	sqlite3_stmt *pStatement;
	 BYTE* dataBuffer = new byte[FS->GetBytesPerCluster()];
	 for(;(!Iterator_inst->IsDone());Iterator_inst->Next())
	 {
		if(Terminated){
			break;
		}
		if(Form1->CheckBox1->Checked && Iterator_inst->Current() == 500) Iterator_inst->Stop();
		Content = Iterator_inst ->GetClusterContent();
		if(Form1->CheckBox1->Enabled){
			if (!Decorator(Content))continue;
		}
		dataBuffer = Iterator_inst->GetDataOnCluster();
		std::wstring DetectedSign = CheckSignature(dataBuffer);
		if(DetectedSign != L"Not Found")
		{
			std::wstring sql = L"INSERT INTO Signatures (Cluster, Signature) Values "  + std::to_wstring(Iterator_inst->Current())
			+ std::to_wstring(',') + DetectedSign + std::to_wstring(')');

			const wchar_t* sql_statement = sql.c_str();
			int result = sqlite3_prepare16_v2(Database, sql_statement, -1, &pStatement, NULL);

			sqlite3_finalize(pStatement);

			sqlite3_close(Database);
		}
		else
		{
		  continue;
        }



		int sign = 1 ;
		if (sign != -1) {
			sqlite3_stmt* pStatement;


			char number = Iterator_inst->GetClusterNumber();
			std::wstring delrow = L"INSERT INTO Clusters (ClusterNumber, Signature) VALUES (" ;
			switch (sign) {
				case 0:
				delrow += L",\"jpeg\");";
				break;
				case 1:
				delrow += L",\"png\");";
				break;
				case 2:
				delrow += L",\"zip\");";
				break;
				case 3:
				delrow += L",\"rar\");";
				break;
				case 4:
				delrow += L",\"gzip\");";
				break;
				case 5:
				delrow += L",\"zip7\");";
				break;
			}
			const wchar_t* sql = delrow.c_str();
			int result = sqlite3_prepare16_v2(Database, sql, -1, &pStatement, NULL);
			if (result != SQLITE_OK) {
				Application->MessageBox(L"[IteratorATOR] Error on Insert into table-1!",L"Message", MB_OK);
			}else{
				result = sqlite3_step(pStatement);
				if(result != SQLITE_DONE)
				{
					Application->MessageBox(L"[IteratorATOR] Error on Insert into table-2!",L"Message", MB_OK);
				}
			}
			sqlite3_finalize(pStatement);
		}
	 }
}
//---------------------------------------------------------------------------
BYTE jpeg[]={0xFF,0xD8,0xFF,0xE0};
BYTE png[]={0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A};
BYTE zip[]={0x50,0x4B,0x03,0x04};
BYTE rar[]={0x52,0x61,0x72,0x21,0x1A,0x07,0x01};
BYTE zip7[]={0x37,0x7A,0xBC,0xAF,0x27};
BYTE *Signatures[]={jpeg,png,zip,rar,zip7};
std::wstring Signatures_name[5] = { L"jpeg", L"png", L"zip", L"rar", L"zip7"};

std::wstring CheckSignature(BYTE* ByteFlow){
	for(int i = 0; i < 5;i++){
		for(int j=0; j<sizeof(Signatures[i]) ;j++)
		{
			if(ByteFlow[j]==Signatures[i][j]){
				if(j==sizeof(Signatures[i])-1)
				{
					return Signatures_name[i];
				}
				else{
					break;
                }
			}
		}
	}
return L"Not Found";
}
